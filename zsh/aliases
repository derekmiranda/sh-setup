# Command Enhancements

# Display
alias display_sleep="pmset displaysleepnow"

# Gets current direcory of this script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Folder shortcuts
alias proj='cd ~/Projects'

# Node
alias node="node --harmony"
alias clear_deps="rm -rf node_modules package-lock.json"
alias static_no_cache="static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'"

# Webpack
alias ngrok_wds="ngrok http 8080 -host-header=\"localhost:8080\""

# Text Editors
alias edit="vim"
alias code="~/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"

# Python
alias pyman="python manage.py"
alias jup='cd ~/projects/Python/jupyter'
alias djangodev='source ~/.virtualenvs/djangodev/bin/activate'

# Docker
alias dcup="docker-compose up --build"

# YouTube-DL
function ytdl() {
  youtube-dl -o '%(title)s.%(ext)s' "$1" --restrict-filenames
}

# Utility
function top_git_dir() {
  # prevent cd'ing forever
  if [[ $PWD == '/' || -e .git ]]; then
    return
  fi

  cd ..
  top_git_dir
}

function stream_size() {
  wc -c | awk '{print $1/1000"K"}'
}

function cmd_on_files() {
  files="$1"
  cmd="$2"
  for f in $files
  do
    $cmd $f 
  done
}

function import_lib() {
  for f in $* 
  do
    f="${f#lib/}"
    f="${f%.js}"
    printf "\n$f" >> index.js
  done
}

function copypath() {
  path=$PWD
  if [[ $# -gt 0 ]]
    then
      path=$PWD/$1
  fi
  printf "%s" "$path" | pbcopy
}

# 1-indexed
function get_nth_word() {
  n=$1
  cut -d ' ' -f $n
}

alias edit_alias='edit ~/sh-setup/zsh/aliases'
# alias edit_local_alias='edit ~/sh-setup/zsh/local_aliases'
alias edit_env='edit ~/sh-setup/zsh/config'
alias restart='exec zsh -l'
alias ssh_pub='cat ~/.ssh/id_rsa.pub | pbcopy'
alias open_ssh_agent='eval "$(ssh-agent -s)"'
alias ssh_add_passphrase='ssh-add --apple-use-keychain ~/.ssh/id_ed25519'

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias cls='clear; ls'
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
function s() {
  n="$1"
  if [ -z "$1" ]; then
    n=1
  fi
  for (( i=0; i < n; i++))
  do
    cd ..
  done
}

# File system commands
function findFilesWith() {
  find . -type f -exec grep "$1" '{}' \; -print
}

function take() { 
    mkdir -p "$1"
    cd "$1" 
}

alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  target=${1%/}
  zip -r $target.zip $target
}

function unzip_dir() {
  dir=${1%.zip}
  unzip "$1" -d "$dir"
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# General code

# From Chris Wanstrath
function pless() { 
    pygmentize $1 | less -r 
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Mercurial hg
function new-hg() {
    ssh hg@example.com "hg init $1"
    hg clone ssh://hg@example.com/$1
}

# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias ga='git add'
alias gaa='git add -A .'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit'
alias gca='git commit --amend --no-edit'
alias gaca='gaa && gca'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -m "$*"
}
function gag() {
  gaa && gg "$*"
}
# Create new branch on remote Git server
function gpup() {
  # uses oh-my-zsh Git util
  local branch=$(current_git_branch)
  git push --set-upstream origin "$branch"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias gs='git status'
alias eg='mate .git/config'
alias gitig='echo "node_modules\n.DS_Store*" >> .gitignore'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}
# Other Git utils
function gss() {
  git fetch
  git status
}
function gpl() {
  git pull
}
function gbr() {
  git branch
}
alias empty_commit="git commit --allow-empty -m"
alias latest_branches="git branch --sort=committerdate"

# Text editing
# Emacs
alias em="open -a Emacs"
alias emm="open -a Emacs ."
# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}

# TextMate
alias et="mate"
alias ett="mate ."
alias etr="mate app config lib db schema public spec test vendor/gems vendor/plugins Rakefile Capfile Vladfile Todofile README stories merb slices tasks features &"

# Ruby
alias r="rake"

function markdown() { 
/Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html 
}

# Rails
alias mr='mongrel_rails start'
alias ms='mongrel_rails stop'
alias rp='touch tmp/restart.txt'
alias sc='./script/console'
alias sg='./script/generate'
alias sp='./script/plugin'
alias ss='./script/server'
alias tl='tail -f log/*.log'
alias ts='thin start'

# TDD / BDD

alias aa='autotest'
alias aaf='autotest -f' # Don't run all at start
alias aas="./script/autospec"

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

# Syntax check Javascript
function jsc() { 
  jsl -conf /etc/jsl/jsl.conf -process $1 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() { 
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
}

alias ox="open *.xcodeproj"

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
function nginx_start() {
    sudo /opt/nginx/sbin/nginx
}

# TaskPaper
function new-tp() {
    touch $1.taskpaper
    open $1.taskpaper
}


# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

# Misc CLI shortcuts
alias pqo="pngquant -f --ext .png"
alias imgoptim="/Users/derek.miranda/Applications/ImageOptim.app/Contents/MacOS/ImageOptim "

function pqio() {
	pqo $*
	imgoptim "${@:2}"
}

